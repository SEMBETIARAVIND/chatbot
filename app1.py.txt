import os
import json
import datetime
import csv
import nltk
import ssl
import streamlit as st
import random
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# Configure SSL for downloading NLTK data
ssl._create_default_https_context = ssl._create_unverified_context
nltk.data.path.append(os.path.abspath("nltk_data"))
nltk.download('punkt')

# Load intents from the JSON file
def load_intents(file_path):
    try:
        with open(file_path, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        st.error("The intents.json file was not found.")
        st.stop()
    except json.JSONDecodeError:
        st.error("The intents.json file is not properly formatted.")
        st.stop()

# Load the intents.json file
file_path = os.path.abspath("./intents.json")
intents = load_intents(file_path)

# Create the vectorizer and classifier
vectorizer = TfidfVectorizer(ngram_range=(1, 4))
clf = LogisticRegression(random_state=0, max_iter=10000)

# Preprocess the data for training
tags = []
patterns = []
for intent in intents:
    for pattern in intent['patterns']:
        tags.append(intent['tag'])
        patterns.append(pattern)

# Train the model
x = vectorizer.fit_transform(patterns)
y = tags
clf.fit(x, y)

# Chatbot function to generate responses
def chatbot(input_text):
    try:
        input_vector = vectorizer.transform([input_text])
        tag = clf.predict(input_vector)[0]
        for intent in intents:
            if intent['tag'] == tag:
                return random.choice(intent['responses'])
    except Exception as e:
        return f"Sorry, I couldn't process that. Error: {str(e)}"

# Initialize counter for unique keys
counter = 0

# Main Streamlit App
def main():
    global counter
    st.title("Chatbot with NLP and Logistic Regression")

    # Sidebar menu
    menu = ["Home", "Conversation History", "About"]
    choice = st.sidebar.selectbox("Menu", menu)

    # Home Menu
    if choice == "Home":
        st.subheader("Welcome to the Chatbot!")
        st.write("Type your message below and start a conversation.")

        # Ensure chat_log.csv exists, or create it
        if not os.path.exists('chat_log.csv'):
            with open('chat_log.csv', 'w', newline='', encoding='utf-8') as csvfile:
                csv_writer = csv.writer(csvfile)
                csv_writer.writerow(['User Input', 'Chatbot Response', 'Timestamp'])

        counter += 1
        user_input = st.text_input("You:", key=f"user_input_{counter}")

        if user_input:
            # Generate chatbot response
            response = chatbot(user_input)
            st.text_area("Chatbot:", value=response, height=120, max_chars=None, key=f"chatbot_response_{counter}")

            # Save conversation to chat_log.csv
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with open('chat_log.csv', 'a', newline='', encoding='utf-8') as csvfile:
                csv_writer = csv.writer(csvfile)
                csv_writer.writerow([user_input, response, timestamp])

            # End conversation if chatbot says goodbye
            if response.lower() in ['goodbye', 'bye']:
                st.success("Thank you for chatting! Have a great day!")
                st.stop()

    # Conversation History Menu
    elif choice == "Conversation History":
        st.header("Conversation History")
        try:
            with open('chat_log.csv', 'r', encoding='utf-8') as csvfile:
                csv_reader = csv.reader(csvfile)
                next(csv_reader)  # Skip the header row
                for row in csv_reader:
                    st.text(f"User: {row[0]}")
                    st.text(f"Chatbot: {row[1]}")
                    st.text(f"Timestamp: {row[2]}")
                    st.markdown("---")
        except FileNotFoundError:
            st.warning("No conversation history found yet!")

    # About Menu
    elif choice == "About":
        st.subheader("About This Project")
        st.write("""
        This chatbot uses NLP techniques and a Logistic Regression model to understand user input and respond accordingly.
        The web interface is built with Streamlit, making it interactive and user-friendly.
        """)

        st.subheader("Key Features:")
        st.write("""
        - Intent classification using TfidfVectorizer and Logistic Regression.
        - Interactive web interface for chat.
        - Persistent conversation history stored in a CSV file.
        """)

        st.subheader("Future Enhancements:")
        st.write("""
        - Add more intents and patterns for broader coverage.
        - Use deep learning models like transformers for improved accuracy.
        - Implement multi-turn conversations and context awareness.
        """)

# Run the app
if __name__ == '__main__':
    main()
